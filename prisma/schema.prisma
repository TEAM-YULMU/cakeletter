generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String
  birth     DateTime
  gender    Gender
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  store Store?

  rooms Room[]
  chats Chat[]
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  OWNER
}

model Room {
  id              Int      @id @default(autoincrement())
  name            String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  // null: 둘 다 읽기 가능, 특정 유저의 아이디: 해당 유저만 읽기 불가능 (채팅방 나가기 기능을 위함)
  chatInvisibleTo Int?     @map("chat_invisible_to")

  // member와 room N:M
  members Member[]
  // room과 chat 1:N
  chats   Chat[]
}

model Chat {
  id        Int      @id @default(autoincrement())
  chat      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  member   Member? @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId Int?    @map("member_id")

  room   Room? @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int?  @map("room_id")

  @@index([memberId])
  @@index([roomId])
}

model Store {
  id           Int      @id @default(autoincrement())
  memberId     Int      @unique @map("member_id")
  name         String
  openDays     Int      @map("open_days")
  address      String
  cityProvince String   @map("city_province")
  district     String
  intro        String
  content      String   @db.Text
  imageUrl     String   @map("image_url") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  member  Member    @relation(fields: [memberId], references: [id])
  Product Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  storeId     Int      @map("store_id")
  name        String   @db.VarChar(40)
  description String?  @db.VarChar(1000)
  price       Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  store            Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
  optionCategories OptionCategory[]
  Image            Image[]
}

model Image {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  url       String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model OptionCategory {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  name      String   @db.VarChar(40)
  required  Boolean  @default(false)
  multiple  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  optionItems OptionItem[]
}

model OptionItem {
  id               Int      @id @default(autoincrement())
  optionCategoryId Int      @map("option_category_id")
  name             String   @db.VarChar(40)
  description      String?  @db.VarChar(1000)
  addtionalPrice   Int?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  optionCategory OptionCategory? @relation(fields: [optionCategoryId], references: [id], onDelete: Cascade)
}
